name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # required for creating GitHub releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            bin_ext: ''
            dll_name: libopencc_jieba_capi.so
            archive_ext: tar.gz
          - os: macos-latest
            platform: macos
            arch: arm64
            bin_ext: ''
            dll_name: libopencc_jieba_capi.dylib
            archive_ext: tar.gz
          - os: windows-latest
            platform: windows
            arch: x64
            bin_ext: '.exe'
            dll_name: opencc_jieba_capi.dll
            archive_ext: zip

    steps:
      - uses: actions/checkout@v4

      # âœ… Pin toolchain to Rust 1.82.0
      - name: Set Rust 1.82.0
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: clippy,rustfmt

      - name: Build Project
        run: cargo build --release --workspace

      - name: Prepare Structured Release Folder
        shell: bash
        run: |
          mkdir -p dist/bin/dicts dist/lib dist/include

          cp target/release/opencc-jieba${{ matrix.bin_ext }} dist/bin/
          cp target/release/opencc-clip-jieba${{ matrix.bin_ext }} dist/bin/
          cp target/release/dict-generate${{ matrix.bin_ext }} dist/bin/

          cp capi/opencc_jieba_capi.h dist/include/
          cp capi/OpenccJiebaHelper.hpp dist/include/

          cp target/release/${{ matrix.dll_name }} dist/lib/
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp target/release/opencc_jieba_capi.dll.lib dist/lib/
          fi

          cp dicts/*.txt dist/bin/dicts/

      - name: Write README.txt and version.txt
        shell: bash
        run: |
          echo "Version: ${{ github.ref_name }}" > dist/version.txt

          {
            echo "Opencc-Jieba ${{ github.ref_name }}"
            echo ""
            echo "Included folders:"
            echo "- bin/: Command-line tools (opencc-jieba, opencc-clip-jieba, dict-generate) and dicts/ folder used at runtime"
            echo "- lib/: C API shared library (platform-specific)"
            echo "- include/: C API header and C++ header-only helper"
            echo "- dicts/: Dictionary TXT files for dict-generate"
            echo ""
            echo "Usage:"
            echo "- Place the shared library in your LD_LIBRARY_PATH (Linux/macOS) or alongside .exe (Windows)."
            echo "- Include the headers in your C/C++ project for FFI integration."
            echo "- Use the TXT files in dicts/ as input to the 'dict-generate' tool."
          } > dist/README.txt

      - name: Package Structured Artifacts
        shell: bash
        run: |
          ARTIFACT_NAME="opencc-jieba-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}"
          if [ "${{ matrix.archive_ext }}" = "tar.gz" ]; then
            tar -czf "${ARTIFACT_NAME}.tar.gz" -C dist .
          else
            7z a "${ARTIFACT_NAME}.zip" ./dist/*
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: opencc-jieba-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: opencc-jieba-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.archive_ext }}

  release:
    name: Release Artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
